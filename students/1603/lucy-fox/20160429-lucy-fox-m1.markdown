# Lucy Fox  - M1 Portfolio

## Individual

### Areas of Emphasis
Beginning my first module at turing, I hoped to learn how to break down big problems into small and easily solvable pieces. I believe no matter what language or stack I'm working in this is a skill I should learn immediately, and a habit I should invest in. Being able to solve large complex problems and projects with smaller broken down pieces makes the process of implementing code not only more successful, but more fun!

### End of Module Assessment

Assessed By: Mike
​
Challenge: Shopping List/Pantry
​
Notes:
* started with tests
* Well written tests based on the given specifications
* Great instincts, reached for appropriate data structures immediately.
* Good communication
* no real hiccups or hesitation
​
#### 1. Ruby Syntax & API
* 4: Developer is able to write Ruby with a minimum of reference or debugging
#### 2. Completion and Progress
* 4: Developer fully completes baseline assignment and one of the Challenge options.
#### 3. Testing
* 4: Developer excels at taking small steps and using the tests for both design and verification
#### 4. Workflow
* 3: Developer demonstrates comfort with their tools and makes some use of keyboard shortcuts
#### 5. Collaboration
* 4: Developer actively seeks collaboration both before implementing, while in motion, and when stuck
### 6. Enumerable & Collections
* 4: Application consistently makes use of the best-choice Enumerable methods
​
​

### Work
I feel like I know finally understand why we were told on our first day of class that we would be writing a sh*t ton of code. After having completed our final project, Black Thursday, and having written hundreds and hundreds of lines of code and tests I certainly feel like I've accomplished that task.

## Team Projects:
#### HTTP Yeah You Know Me

* [GitHub URL] https://github.com/lucyfox4131/http_yeah_you_know_me
* [Original Assignment] https://github.com/turingschool/curriculum/blob/master/source/projects/http_yeah_you_know_me.markdown

After spending our first day of this project spending hours reading and figuring out what half the language in the spec  meant, Robbie and I were able to successfully implement a basic HTTP server. We completed the first extension, and gave threading a shot (but were unsuccessful). This was an extremely enjoyable project for me, and I feel that I learned a ton that will serve me well in later modules.

(Evaluation Comments)
Fundamental Ruby & Style : There were a couple of long methods. That's kind of hard to get away from esp with the main file. What I did see is that they moved the logic into other methods within the other classes. I liked that. I stuck to the single-responsiblity rule.
TDD : I liked the test. Some of the classes were tested indirectly. I game them a 3.5 because of how broken down they where. There is some room for improvement but I feel like they were pretty much there.
Breaking Logic into Components : this goes hand in hand with the FR&S. I liked how this group was holding to keeping things clean and simple. One method does one thing.

(Evaluation Scores)
4 Overall Functionality, Application implements all iterations and at least one extension
4 Fundamental Ruby & Style, Application demonstrates excellent knowledge of Ruby syntax, style, and refactoring
3.5 Test-Driven Development, Application uses test to exercise core functionality and some edge cases, but fails to break out component objects/tests
4 Breaking Logic into Components, Application effectively breaks logical components apart with clear intent and usage


### Individual Projects

#### Mastermind

* [GitHub URL] https://github.com/lucyfox4131/mastermind.git
* [Original Assignment] https://github.com/turingschool/curriculum/blob/master/source/projects/mastermind.markdown

I dove headfirst into this project trying to find a way to write a multi-class functional program without ever having written a class, or really much ruby. I was extremely proud of how this first project ended up for me. I never could've believed that I could complete this after only a week at Turing.

(evaluation comments)
Assessed by: Mike

Command line Wrapper
Some opportunities to refactor and pull code out to different classes, maybe some separate methods.
Some advanced enumerable use could shorten some code.

(evaluation scores)

#### 1. Fundamental Ruby & Style
* 3: Application shows some effort toward organization but still has 6 or fewer long methods (> 8 lines) and needs some refactoring.
#### 2. Enumerable & Collections
* 3: Application demonstrates comfortable use of several Enumerable techniques and collections
#### 3. REPL Interface and Game Functionality
* 4: Application's REPL goes above and beyond expectations and application includes one or more extensions
#### 4. Breaking Logic into Components
* 3: Application consistently breaks concepts into logical methods to encapsulate functionality.

#### Suggested For You

* [GitHub URL] https://github.com/lucyfox4131/suggested-netflix.git
* [Original Assignment] https://github.com/turingschool/curriculum/blob/master/source/projects/binary_search_tree.markdown

This was the first occasion at Turing where I really felt like a project kicked my butt. I unfortunately was not able to complete the last "health of tree" requirement, but felt like I learned a ton about using recursion and binary search trees. I even found myself in later projects thinking about them being very helpful...

(evaluation comments)

Assessed by: Lovisa
- well tested, nice use of both happy and sad path tests - most methods tested
- could create a "populate tree" method to further abstract
- nice abstractions, could refactor some of the longer nested if/elsif/else statements
- good naming

(evaluation scores)

#### 1. Functional Expectations
* 2: Application is missing one base expectation
#### 2. Test-Driven development
* 3: Application is well tested but does not balance isolation and integration tests, using only the data necessary to test the functionality
#### 3. Encapsulation / Breaking Logic into Components
* 3: Application effectively breaks logical components apart but breaks the principle of SRP
#### 4. Fundamental Ruby & Style
* 3.5: Application shows strong effort towards organization, content, and refactoring
#### 5. Looping or Recursion
* 4: Application makes excellent use of loop/recursion techniques


#### Sorting-Suite

* [GitHub URL] https://github.com/lucyfox4131/Sorting-Suite.git
* [Original Assignment] https://github.com/turingschool/curriculum/blob/master/source/projects/sorting_suite.markdown

One of the best parts about this project was getting to watch all of the mesmerizing videos explaining each sorting technique. I found this project bringing back distant memories of math classes. It was extremely enjoyable, and I was happy to follow up binary search tree with the sorting suite.

(evaluation comments)

Assessed by: Lovisa
- good, iterative testing
- could use more sad path/edge case tests
- very good, easy to understand/read code

(evaluation scores)

#### 1. Functional Expectations
* 3: All three sort classes work as expected
#### 2. Test-Driven development
* 3.5: Tests cover functionality and demonstrate some escalation of complexity across the examples.
#### 3. Fundamental Ruby & Style
* 4: Any given chunk of code can be understood at a single level of abstraction.
#### 4. Organization
* 4: Version control maintains the codebase.

#### Battleship

* [GitHub URL] https://github.com/lucyfox4131/Battleship.git
* [Original Assignment] https://github.com/turingschool/curriculum/blob/master/source/projects/battleship.markdown

This was the toughest project for me. I made a mistake I plan to never repeat by changing the functionality of my program the night before it was due. Because of this I was not able to complete all the functionality.

(evaluation comments)

Assessed by: Mike
- Logic isn't working in the REPL
- Incomplete tests due to a late night pivot.
- code was well split, up.
- Was able to spot and improve on first approaches.

(evaluation scores)

#### 1. Fundamental Ruby & Style
* 3: Application shows strong effort towards organization, content, and refactoring
#### 2. Enumerable & Collections
* 3: Application demonstrates comfortable use of several Enumerable techniques
#### 3. Test-Driven Development
* 2: Application makes some use of tests, but the coverage is insufficient
#### 4. REPL Interface
* 2: Application's REPL has some inconsistencies or rough edges.
#### 5. Breaking Logic into Components
* 3: Application effectively breaks logical components apart with clear intent and usage

### Instructor Pairing Feedback
I had the chance to get pairing feedback from Mike during week 4 of the module. He made several recommendations regarding workflow. One which I have been trying to implement is using spectacle to keep my terminal on the bottom third of my screen and atom on the top third. He also encouraged my to create more individualized shortcuts in atom so that I'm more comfortable working in it. As far as ruby goes he encouraged me to continue trying to complete all of the drills that we were given the very first week to further my ruby understanding as well as problem solving skills.

### Giving Feedback

Robbie Jaeger - "I feel lucky having had the chance to work with Robbie for our first pair project. Though we had a few minor git issues along the way I was very impressed with his problem solving and code skills. It's evident when working with Robbie that he has put a lot of time into learning proper Ruby style and syntax. Throughout the project he always knew the right enumerable/method to use to get the job done. Robbie takes the time to thoroughly explain his ideas and thought process clearly. I appreciated that he always made sure that both of us understood the problem we were tackling so that we could find the best way to solve it."

Christine Gamble - "Christine is my git hero! I've been struggling trying to nail down my git workflow and understand problems that arise with git. She has been unbelievably helpful in clarifying the git workflow process and helping us to overcome any merge conflicts during our Black Thursday project. I don't think I could've handled git quite as well without her helpful guidance and suggestions. I think Christine has very strong fundamentals in Ruby style and syntax and understands how to create amazing programs. I do hope that in future group projects Christine is more willing to speak up and experiment. I think she has the potential to contribute amazing things while at Turing and I hope she remembers her talents while working on future projects and isn't afraid to try new things."

### Being a Community Member

"Lucy is a very strong programmer to say the least. She has a great methodology for breaking down problems into sizable chunks and solving them piece by piece. We paired on HTTP Yeah You Know Me, and she would usually diagram everything and talk through things aloud. This was a great asset to both of us because we were always on the same page throughout the project. Lucy has said she is a very competitive person, which proves she is ambitious and driven, but in the future it might lead to being hard on herself unnecessarily. All through the project, I could always count on Lucy to work hard, above and beyond expectations of the project spec. Overall, Lucy was awesome to work with, and I wouldn’t hesitate to work with her again in the future." - Robbie Jaeger

### Playing a Part
- In this first module, I've been trying to get to know the turing community by participating in all extracurriculars             I've found to be interesting and helpful. I've been attending productivity meetings, Joan Clarke mornings, and imposters lunches.

- I firmly believe that the best way to really understand something is to explain it to other people. And, as a former tutor, I enjoy being able to help my peers solve problems if I know the answer. As I've gone through this first module, I've tried my best to be a resource for other 1603 students. Many times, I've been lucky enough to be able to provide feedback and assistance in helping my peers debug problems from the first set of drills through Black Thursday.

### Soft Skills/Protocol Requirements

1. DTR Memos from partner projects:
HTTP : https://github.com/lucyfox4131/http_yeah_you_know_me/blob/master/DTR.md
Black Thursday: https://github.com/ccgamble/black_thursday/blob/master/DTR.txt

2. Example of a README.md for a project during the module
HTTP Yeah You Know Me

Purpose:

The purpose of this project was to create a local HTTP server that implemented and demonstrated understanding of the request/response cycle. You can use this server to output the current date and time, or even play a guessing game!

Cloning:
git clone https://github.com/lucyfox4131/http_yeah_you_know_me.git

File Structure:
lib
  - game.rb
  - request.rb
  - response.rb
  - server.rb
  - system_error.rb

test
  - request_test.rb
  - server_test.rb
  - test_helper.rb

Usage:

After cloning the repo you must first start the server by running `ruby server.rb`. You can use postman, or a browser to run server requests. You can use `http://127.0.0.1:9292` using port `9292` locally. The server has several paths available. If you chose to start out with no path designated the server will output diagnostics of the GET request. Alternatively, you can vistit one of the many paths implemented.
* To see Hello World printed out to the screen including a counter of the amount of requests on that page you can type  `http://127.0.0.1:9292/hello`.
* To see the current date and time `/datetime`.
* You can shutdown the server by using  `/shutdown`
* You can see if a word exists in the dictionary by using and entering your word as a parameter  `/word_search`
* You may also modify your word search to output in JSON by using the `HTTP-Accept` and entering `application/json`.
* Finally, you can play a game guessing a number between 1-100. Send a `POST` request to `/start_game` and to guess a number send a `POST` request to `/game` with a number guess in the body of the request.
* If you want to see how the server handles errors you can visit the `/force_error` to show the System handling an error.

#### Self Assessment Scores
## A. End-of-Module Assessment
  4. Student achieved two or more "4s" on the assessment
## B. Individual Work & Projects
  3. Student demonstrates commitment and growth in their work through satisfactory evaluations of each project or a clearly upward-sloping trend
## C. Group Work & Projects
  3. Student fully participates in their group work to facilitate group harmony while achieving consistently satisfactory results.
## D. Community Participation
  3. Student participates in required activities and does at least one or two above-and-beyond supports of the community.
## E. Peer & Instructor Feedback
  3. Student consistently delivers meaningful feedback for peers and implements strategies to improve themselves in response to feedback.

## Review

### Notes

( Leave blanks for reviewers )

### Outcome

( Leave blanks for reviewers )
