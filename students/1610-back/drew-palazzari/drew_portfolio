Drew Palazzari - Module 1 Portfolio

Areas of Emphasis

My first goal this module was, as Jeff said, to survive. I did not, however want to survive by accomplishing the bare minimum. 
I want to become the best programmer in the Ruby language. To achieve this: 1)I will try my absolute best not to fall behind,
2) I will get help from pairings when I need it, 3) I will be honest about my inabilities as well as my best abilities, and 
4) I will strive to enjoy my time here at Turing and to try to have fun learning a new computer language. It's exciting, 
depsite the challnge. 

Rubric Scores

A: End-of-Module Assessment: X
B: Individual Work & Projects: X
C: Group Work & Projects: X
D: Professional Skills: X
E: Feedback & Community Participation: X
A: End of Module Assessment

(Notes & scores from your assessment rubric)

B: Individual Work & Projects

Individual projects were very challenging. They test your ability to access knowledge, and understand it. Overall, I am 
pleased with the results of my individual projects.

MASTERMIND

https://github.com/Dpalazzari/Mastermind
Mastermind markdown: https://github.com/turingschool/curriculum/blob/master/source/projects/mastermind.markdown

The purpose of this project was to build a working Ruby-programmed version of the game, Mastermind. The student was expected
to demonstrate adequate use of Ruby flow mechanics, logical use of TDD and REPL, 'good code', and the student's ability to 
build a multi-part complex, working, game. 

GitHub URL of Drew's Mastermind Project Evaluation:
https://github.com/turingschool/ruby-submissions/blob/master/1610-b/mastermind/drew-palazzari.md

Evaluation scores:

1) Test Driven Development
  score: 2 : Application tests some components but has many gaps in coverage.
2) REPL Interface and Game Functionality
  score: 3 : Application's REPL is clear and pleasant to use and application fulfills base expectations 
  from the project spec.
3) Breaking Logic into Components
  score: 2.5 : Application makes use of some classes, but the divisions or encapsulation are unclear.
4. Fundamental Ruby & Style
  score: 3 :Application shows some effort toward organization but still has 6 or fewer long methods (> 8 lines)
  needs some refactoring, and is mostly idiomatic.
5) Enumerable & Collections
   score: 3 :Application makes use of appropriate Enumerable methods and collections.
   
Personal analysis of Mastermind: I need to focus on improving my TDD skills, first off. I built Mastermind without tests
and then went back after it worked and fruitlessly tried to test it. This is a very difficult way to write a program. Second,
I can do better at organizing my code in an easier-to-read fashion. My Mastermind game had methods everywhere, and it wasn't
always clear where other methods were that were being called in a different method. It was hard for anyone but me to navigate.
Also, I need to spend more time refactoring. I had a couple methods that were just enormously large. I should strive to make
more, smaller methods in my classes. 

Things to learn:
1) TDD
2) implementing multiple classes
3) understanding input/output
4) Hash methods.


C: Group Work & Projects

NightWriter/NightReader

https://github.com/Dpalazzari/NightWriter
NightWriter markdown: https://github.com/turingschool/curriculum/blob/master/source/projects/night_writer.markdown

project pairing: Edilene

The purpose of this project was to pair with a classmate, and create a program that could read a text file and then write that
text to a new file, translated in braille. It was required to read in braille and write to english, as well. First, we had
to build the writer and reader scripts. Then we built two translators. One for english to braille, and the other for braille to
english. We stored the languages in a hash. 

Link to evaluation markdown: https://github.com/turingschool/ruby-submissions/blob/master/1610-b/night_writer/drew_edilene.md

Test Driven Development:
  2.5 :Application makes some use of tests, but the coverage is insufficient.
Breaking Logic into Components
  3 :Application consistently breaks concepts into classes and methods which have appropriate scope and responsibilities (SRP).
Fundamental Ruby and Style:
  3 :Application shows some effort toward organization but still has 6 or fewer long methods (> 8 lines) needs some refactoring, 
  and is mostly idiomatic.
Overall Functionality
  3 :Application follows the complete spec and one extension

-32 tests - all passing
-Had some trouble with where the files live in the root and lib etc.
-Make runner class include methods as well
-The tests need to cover all of the methods

  Could have had better testing. When we did our testing, it was thorough for the ONE method we had at the time. After refactoring,
we changed some methods names in the tests, but didn't go back and retest the new methods we had. The application still worked,
but the testing was not as thorough as it could have been. Also, could not figure out how to run the programs from the parent
directory. Apparently, it was because the text files we were reading from were located in the lib folder. They should have been
located in the parent directory. Our require statements at the top of every class were right, we just did not have the files in the
proper place. Overall, we did well on the project. I was not, however, a very good pairing partner for Edilene.

  Edilene felt she did not contribute anything to the project. I was dismissive of her ideas at some points during the paired project.
I DID make sure she understood everything that was happening in the project, however. I appeared dismissive because it was often times
unclear to me what she was trying to illustrate. We agreed during our DTR that we would work on the same thing together, so as
to obtain a better understanding of what was happening in the code. 

  Often times, she really did not come up with any ideas that worked, so naturally we did not use
them (I had bad ideas, too). When I went home after our pairing, I was always thinking of ways to solve the problems in our code, so
that when we met next, we could make some progress. This happened several times, and led to some major headway in our project. I 
disagree with Edilene at this juncture. I cannot dismiss her ideas if she does not have any. I felt I had to solve the bigger issues
in the project. Edilene was excellent at finding good areas for refactoring, finding things we should change (usually nomenclature)
and solving all those small, annoying bugs and errors that I could not figure out.

  Overall, I took her feedback to heart, and will strive to be more open minded to other possibilities in future pairings. My
way is never always the best way. I need to understand that every student at Turing or in the software development field as a
whole has a tremendous amount of ideas and coding to contribute to the community. I am sad that Edilene felt useless, as I did 
not share that sentiment. I am happy that she told me she learned a great deal about coding while working with me on NightWriter.

Learning Areas of Focus:
-integrating FileI/O in a class program. Our Nightwriter had a scripted File reader/writer
-creating rakefiles
-finding other, more efficient ways to do the same thing
-Review everything
-test thoroughly
-most importantly, I need to listen to my peers more/better

D: Professional Skills

(Intro)

Gear Up

Vote Your Conscience
markdown: https://github.com/turingschool/gear-up/blob/master/vote_your_conscience.markdown

It was an interesting session, talking about the outside factors that influence people to vote. I chose to pursue topic 2:
Information Intermediaries. There was certainly a diversity of famous people who support either candidate. To be honest, that
means nothing to me. Celebrities and entertainers are known for their ability to perform/entertain. They aren't professional
politicians so I really do not take anything they say to heart. I will listen, but usually I do not pay attention. The number
one thing I took away from this gear up was that there are people with legit reasons on both sides of the line who choose their
side for one reason or another. It is always beneficial to concede, and relate that some of the things the opposition say are
true. That may or may not influence my vote, but if I can read into proven facts, then I am an informed voter and I can vote
my conscience. At the end of the day, the decision to vote or not or for a particular candidate comes down to the individual.
Hopefully most people do not let the sole input of famous people's influence sway their decisions to vote. 

Introversion and extroversion on Teams
Markdown: https://github.com/turingschool/gear-up/blob/master/introversion.markdown

This session was pretty straight forward. It was about understanding the needs of extroverts and introverts and how these two
different approaches must work together sometimes to achieve the same goal. My group agreed that Turing generally caters to the
extroverted style. It is highly necessary to work together with other students in the school to learn at a high level. If students
are encouraged to work singularly, they will likely fall behind. 

Professional Development Workshops

(Session Name)

Workshop URL
Link to Completed Deliverables

 

E: Feedback and Community Participation

Giving Feedback

(feedback from me)

Being a Community Member

(feedback to me)

Playing a Part

(ways you supported the larger Turing community)

Final Review

Notes

( Leave blanks for reviewers )

Outcome

( Leave blanks for reviewers )
